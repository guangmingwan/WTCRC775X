<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [wtcrc103rgt6\wtcrc103rgt6.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image wtcrc103rgt6\wtcrc103rgt6.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6190004: Last Updated: Tue Nov 21 01:27:47 2023
<BR><P>
<H3>Maximum Stack Usage =       1056 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; TunerLoop &rArr; Menu &rArr; ProcMenuItem &rArr; Menu_Help &rArr; GetKey &rArr; IR_Check &rArr; processRemoteInput &rArr; switchFMChannel &rArr; ProcBand &rArr; SeekCh &rArr; LCDUpdate &rArr; OLED_XYStrLen &rArr; OLED_XYChar &rArr; OLED_ShowChar &rArr; DispChar &rArr; OLED_address &rArr; transfer_command &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[128]">ProcSubMenu</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f8]">ProcMenuItem</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[39]">ADC3_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32f1xx_it.o(.text.BusFault_Handler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[42]">DMA2_Channel1_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[43]">DMA2_Channel2_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[44]">DMA2_Channel3_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[45]">DMA2_Channel4_5_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32f1xx_it.o(.text.DebugMon_Handler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from stm32f1xx_it.o(.text.EXTI15_10_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from stm32f1xx_it.o(.text.EXTI9_5_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[3a]">FSMC_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f1xx_it.o(.text.HardFault_Handler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32f1xx_it.o(.text.MemManage_Handler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f1xx_it.o(.text.NMI_Handler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from stm32f1xx_it.o(.text.PendSV_Handler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[33]">RTC_Alarm_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[3b]">SDIO_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[3d]">SPI3_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from stm32f1xx_it.o(.text.SVC_Handler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from stm32f1xx_it.o(.text.SysTick_Handler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[47]">SystemInit</a> from system_stm32f1xx.o(.text.SystemInit) referenced from startup_stm32f103xg.o(.text)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[23]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from stm32f1xx_it.o(.text.TIM2_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from stm32f1xx_it.o(.text.TIM3_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[3c]">TIM5_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[40]">TIM6_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[41]">TIM7_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[35]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[38]">TIM8_CC_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[37]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[36]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[3e]">UART4_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[3f]">UART5_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[34]">USBWakeUp_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[1d]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[1e]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32f1xx_it.o(.text.UsageFault_Handler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[48]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f103xg.o(.text)
 <LI><a href="#[4a]">_sbackspace</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[49]">_sgetc</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[4d]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[4c]">fputc</a> from main.o(.text.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[4b]">isspace</a> from isspace_o.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[46]">main</a> from main.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[48]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(.text)
</UL>
<P><STRONG><a name="[160]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[4e]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[6e]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[161]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[162]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[163]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[164]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[165]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[143]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processRemoteInput
</UL>

<P><STRONG><a name="[106]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Help
</UL>

<P><STRONG><a name="[166]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[51]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
</UL>

<P><STRONG><a name="[167]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[168]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[50]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[13a]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[169]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[52]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[144]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processRemoteInput
</UL>

<P><STRONG><a name="[108]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcSubMenu
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Help
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_XYStrLen
</UL>

<P><STRONG><a name="[145]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processRemoteInput
</UL>

<P><STRONG><a name="[115]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Stat
</UL>

<P><STRONG><a name="[53]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processRemoteInput
</UL>

<P><STRONG><a name="[14a]"></a>__aeabi_fmul</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchFMChannel
</UL>

<P><STRONG><a name="[56]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSineFreq
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckUpdateSig
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRFStatReg
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[5b]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[5c]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[5d]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSineFreq
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckUpdateSig
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRFStatReg
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[5e]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSineFreq
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunerLoop
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThrottleFunction
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[96]"></a>__aeabi_dcmple</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, dcmple.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_dcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSineFreq
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckUpdateSig
</UL>

<P><STRONG><a name="[133]"></a>__aeabi_dcmpeq</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, dcmpeq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_dcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSineFreq
</UL>

<P><STRONG><a name="[5f]"></a>__aeabi_i2f</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Stat
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckUpdateSig
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRFStatReg
</UL>

<P><STRONG><a name="[61]"></a>__aeabi_ui2f</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckUpdateSig
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRFStatReg
</UL>

<P><STRONG><a name="[62]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSineFreq
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunerLoop
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThrottleFunction
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[14b]"></a>__aeabi_f2iz</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ffixi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchFMChannel
</UL>

<P><STRONG><a name="[63]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSineFreq
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Stat
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckUpdateSig
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRFStatReg
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[94]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Stat
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchFMChannel
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckUpdateSig
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRFStatReg
</UL>

<P><STRONG><a name="[65]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processRemoteInput
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckUpdateSig
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[16a]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[15d]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[67]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[57]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[16b]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[64]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[16c]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[58]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[16d]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[6a]"></a>__strtod_int</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>

<P><STRONG><a name="[55]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[16e]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[66]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[60]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[5a]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[59]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>

<P><STRONG><a name="[6d]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[15a]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[4f]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[16f]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[6b]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[4b]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace_o.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isspace
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[69]"></a>_scanf_real</STRONG> (Thumb, 0 bytes, Stack size 104 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>

<P><STRONG><a name="[71]"></a>_scanf_really_real</STRONG> (Thumb, 556 bytes, Stack size 104 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[49]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[4a]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[6c]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[151]"></a>__ARM_scalbn</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[170]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[74]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[73]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[70]"></a>__aeabi_ul2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[171]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[172]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[75]"></a>AddDelCh</STRONG> (Thumb, 590 bytes, Stack size 40 bytes, ui.o(.text.AddDelCh))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = AddDelCh &rArr; YesNo &rArr; GetKey &rArr; IR_Check &rArr; processRemoteInput &rArr; switchFMChannel &rArr; ProcBand &rArr; SeekCh &rArr; LCDUpdate &rArr; OLED_XYStrLen &rArr; OLED_XYChar &rArr; OLED_ShowChar &rArr; DispChar &rArr; OLED_address &rArr; transfer_command &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YesNo
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear2
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRRot
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckUpdateSig
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDUpdate
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteChFreq
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadChFreq
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Refresh
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_XYUIntLenZP
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_XYIntLen
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TuneFreqDisp
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdjFreq
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckUpdateAlt
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLRot
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_XYStr
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunerLoop
</UL>

<P><STRONG><a name="[87]"></a>AddSyncBits</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, tuner.o(.text.AddSyncBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AddSyncBits
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcMenuItem
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_SCSV
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_BalFader
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Tone
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_NoiseBlanker
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Stereo
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_AGC
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_FMDynamicBW
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_Check
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunerLoop
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMode_AUX
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMode_RF
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcStepFilter
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRFMode
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcBand
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFilter
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckVolume
</UL>

<P><STRONG><a name="[79]"></a>AdjFreq</STRONG> (Thumb, 380 bytes, Stack size 12 bytes, tuner.o(.text.AdjFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = AdjFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_SCSV
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDelCh
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunerLoop
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Seek
</UL>

<P><STRONG><a name="[89]"></a>BackLightOn</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lcd25696.o(.text.BackLightOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BackLightOn &rArr; HAL_GPIO_WritePin &rArr; assert_failed
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8b]"></a>BootDirana3</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, tuner.o(.text.BootDirana3))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = BootDirana3 &rArr; dsp_write_data &rArr; WaitEasyReady &rArr; dsp_start_subaddr3 &rArr; I2C_Start &rArr; I2C_WriteByte &rArr; I2C_Delay &rArr; HAL_Delay_us &rArr; HAL_SYSTICK_Config &rArr; SysTick_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_write_data
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcMenuItem
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunerInit
</UL>

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_it.o(.text.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>CheckUpdateAlt</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, ui.o(.text.CheckUpdateAlt))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = CheckUpdateAlt &rArr; ShowTime &rArr; OLED_XYUIntLenZP &rArr; OLED_XYChar &rArr; OLED_ShowChar &rArr; DispChar &rArr; OLED_address &rArr; transfer_command &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowVol
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowTime
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMisc
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_SCSV
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_Check
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDelCh
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunerLoop
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanAny
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Seek
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckVolume
</UL>

<P><STRONG><a name="[81]"></a>CheckUpdateSig</STRONG> (Thumb, 1064 bytes, Stack size 80 bytes, ui.o(.text.CheckUpdateSig))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = CheckUpdateSig &rArr; OLED_XYIntLen &rArr; OLED_XYChar &rArr; OLED_ShowChar &rArr; DispChar &rArr; OLED_address &rArr; transfer_command &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmple
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRFStatReg
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_XYChar
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_XYIntLen
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_start_subaddr
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadByte
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Restart
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcSubMenu
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_SCSV
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YesNo
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Stat
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Time
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_AnyHoldTime
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_ScanStayTime
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_BacklightKeep
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_BacklightAdj
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_NoiseBlanker
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Stereo
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_AGC
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_FMDynamicBW
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Squelch
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDelCh
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunerLoop
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanAny
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Seek
</UL>

<P><STRONG><a name="[99]"></a>CheckVolume</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, tuner.o(.text.CheckVolume))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = CheckVolume &rArr; CheckUpdateAlt &rArr; ShowTime &rArr; OLED_XYUIntLenZP &rArr; OLED_XYChar &rArr; OLED_ShowChar &rArr; DispChar &rArr; OLED_address &rArr; transfer_command &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckUpdateAlt
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddSyncBits
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLRot
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVolumeThr
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunerLoop
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanAny
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Seek
</UL>

<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(.text.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[9b]"></a>DispChar</STRONG> (Thumb, 252 bytes, Stack size 32 bytes, lcd25696.o(.text.DispChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = DispChar &rArr; OLED_address &rArr; transfer_command &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_data
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reverse_bit
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_address
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
</UL>

<P><STRONG><a name="[9f]"></a>DispFill</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, lcd25696.o(.text.DispFill))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = DispFill &rArr; OLED_address &rArr; transfer_command &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_data
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_address
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
</UL>

<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32f1xx_it.o(.text.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = EXTI15_10_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; HAL_GPIO_ReadPin &rArr; assert_failed
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f1xx_it.o(.text.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = EXTI9_5_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; HAL_GPIO_ReadPin &rArr; assert_failed
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[f2]"></a>Error_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[7e]"></a>GetKey</STRONG> (Thumb, 346 bytes, Stack size 24 bytes, ui.o(.text.GetKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = GetKey &rArr; IR_Check &rArr; processRemoteInput &rArr; switchFMChannel &rArr; ProcBand &rArr; SeekCh &rArr; LCDUpdate &rArr; OLED_XYStrLen &rArr; OLED_XYChar &rArr; OLED_ShowChar &rArr; DispChar &rArr; OLED_address &rArr; transfer_command &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeekKey
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_Check
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Display_On
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcSubMenu
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Sine
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Help
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_SCSV
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YesNo
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_BalFader
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Tone
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Stat
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Time
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_AnyHoldTime
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_ScanStayTime
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_BacklightKeep
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_BacklightAdj
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_NoiseBlanker
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Stereo
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_AGC
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_FMDynamicBW
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Squelch
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDelCh
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunerLoop
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanAny
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Seek
</UL>

<P><STRONG><a name="[77]"></a>GetLRot</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, ui.o(.text.GetLRot))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GetLRot &rArr; OLED_Display_On &rArr; HAL_GPIO_WritePin &rArr; assert_failed
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Display_On
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcSubMenu
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Sine
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Help
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_BalFader
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Tone
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Stat
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Time
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_AnyHoldTime
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_ScanStayTime
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_BacklightKeep
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_BacklightAdj
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_NoiseBlanker
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Stereo
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_AGC
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_FMDynamicBW
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Squelch
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDelCh
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckVolume
</UL>

<P><STRONG><a name="[95]"></a>GetRFStatReg</STRONG> (Thumb, 252 bytes, Stack size 32 bytes, tuner.o(.text.GetRFStatReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = GetRFStatReg &rArr; dsp_start_subaddr &rArr; I2C_Start &rArr; I2C_WriteByte &rArr; I2C_Delay &rArr; HAL_Delay_us &rArr; HAL_SYSTICK_Config &rArr; SysTick_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_start_subaddr
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadByte
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Restart
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_SCSV
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckUpdateSig
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Seek
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSigOK
</UL>

<P><STRONG><a name="[78]"></a>GetRRot</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, ui.o(.text.GetRRot))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GetRRot &rArr; OLED_Display_On &rArr; HAL_GPIO_WritePin &rArr; assert_failed
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Display_On
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcSubMenu
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Sine
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Help
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_BalFader
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Tone
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Stat
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Time
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_AnyHoldTime
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_ScanStayTime
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_BacklightKeep
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_BacklightAdj
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_NoiseBlanker
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Stereo
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_AGC
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_FMDynamicBW
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Squelch
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDelCh
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunerLoop
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanAny
</UL>

<P><STRONG><a name="[82]"></a>HAL_Delay</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, stm32f1xx_hal.o(.text.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay_us
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcSubMenu
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_SCSV
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YesNo
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_BalFader
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Tone
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Stat
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Time
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_AnyHoldTime
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_ScanStayTime
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_BacklightKeep
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_BacklightAdj
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_NoiseBlanker
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Stereo
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_AGC
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_FMDynamicBW
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Squelch
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDelCh
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunerInit
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanAny
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Seek
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSigOK
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_write_data
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootDirana3
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_erase_full_chip
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_word
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_byte
</UL>

<P><STRONG><a name="[a6]"></a>HAL_Delay_us</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, soft_i2c.o(.text.HAL_Delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_Delay_us &rArr; HAL_SYSTICK_Config &rArr; SysTick_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Delay
</UL>

<P><STRONG><a name="[a9]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, ui.o(.text.HAL_GPIO_EXTI_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_GPIO_EXTI_Callback &rArr; HAL_GPIO_ReadPin &rArr; assert_failed
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[a0]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32f1xx_hal_gpio.o(.text.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; HAL_GPIO_ReadPin &rArr; assert_failed
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[ab]"></a>HAL_GPIO_Init</STRONG> (Thumb, 1576 bytes, Stack size 80 bytes, stm32f1xx_hal_gpio.o(.text.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_GPIO_Init &rArr; assert_failed
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_MspInit
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[aa]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f1xx_hal_gpio.o(.text.HAL_GPIO_ReadPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_GPIO_ReadPin &rArr; assert_failed
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeekKey
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>

<P><STRONG><a name="[8a]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, stm32f1xx_hal_gpio.o(.text.HAL_GPIO_WritePin))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_GPIO_WritePin &rArr; assert_failed
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackLightOn
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_command
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_data
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_SetBackLight
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Display_On
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootDirana3
</UL>

<P><STRONG><a name="[88]"></a>HAL_GetTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f1xx_hal.o(.text.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Stat
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Time
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowTime
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_Check
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunerLoop
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunerInit
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRRot
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Display_On
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanAny
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeekCh
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TuneFreq
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TuneReg
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckUpdateAlt
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddSyncBits
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLRot
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>

<P><STRONG><a name="[138]"></a>HAL_IncTick</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f1xx_hal.o(.text.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[ad]"></a>HAL_Init</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, stm32f1xx_hal.o(.text.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[af]"></a>HAL_InitTick</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, stm32f1xx_hal.o(.text.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[b0]"></a>HAL_MspInit</STRONG> (Thumb, 100 bytes, Stack size 12 bytes, stm32f1xx_hal_msp.o(.text.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[a4]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, stm32f1xx_hal_cortex.o(.text.HAL_NVIC_DisableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_NVIC_DisableIRQ &rArr; assert_failed
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRRot
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLRot
</UL>

<P><STRONG><a name="[a5]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, stm32f1xx_hal_cortex.o(.text.HAL_NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_NVIC_EnableIRQ &rArr; assert_failed
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_MspInit
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_MspInit
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRRot
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLRot
</UL>

<P><STRONG><a name="[b1]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, stm32f1xx_hal_cortex.o(.text.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EncodePriority
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_MspInit
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_MspInit
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[ae]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32f1xx_hal_cortex.o(.text.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_NVIC_SetPriorityGrouping &rArr; __NVIC_SetPriorityGrouping
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[b8]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 1018 bytes, Stack size 24 bytes, stm32f1xx_hal_rcc.o(.text.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[a7]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f1xx_hal_rcc.o(.text.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay_us
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>

<P><STRONG><a name="[ba]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f1xx_hal_rcc.o(.text.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[bb]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f1xx_hal_rcc.o(.text.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[b9]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 228 bytes, Stack size 44 bytes, stm32f1xx_hal_rcc.o(.text.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[bc]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 2272 bytes, Stack size 32 bytes, stm32f1xx_hal_rcc.o(.text.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_OscConfig &rArr; assert_failed
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[be]"></a>HAL_SPI_Init</STRONG> (Thumb, 944 bytes, Stack size 24 bytes, stm32f1xx_hal_spi.o(.text.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init &rArr; assert_failed
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
</UL>

<P><STRONG><a name="[bf]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 282 bytes, Stack size 64 bytes, spi.o(.text.HAL_SPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = HAL_SPI_MspInit &rArr; HAL_GPIO_Init &rArr; assert_failed
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[c0]"></a>HAL_SPI_Transmit</STRONG> (Thumb, 684 bytes, Stack size 40 bytes, stm32f1xx_hal_spi.o(.text.HAL_SPI_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_command
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_data
</UL>

<P><STRONG><a name="[a8]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, stm32f1xx_hal_cortex.o(.text.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_SYSTICK_Config &rArr; SysTick_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay_us
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[d4]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32f1xx_hal_tim_ex.o(.text.HAL_TIMEx_BreakCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIMEx_BreakCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[d6]"></a>HAL_TIMEx_CommutCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32f1xx_hal_tim_ex.o(.text.HAL_TIMEx_CommutCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIMEx_CommutCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[c3]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 606 bytes, Stack size 32 bytes, stm32f1xx_hal_tim_ex.o(.text.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_TIMEx_MasterConfigSynchronization &rArr; assert_failed
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
</UL>

<P><STRONG><a name="[c4]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 516 bytes, Stack size 24 bytes, stm32f1xx_hal_tim.o(.text.HAL_TIM_Base_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_TIM_Base_Start_IT &rArr; assert_failed
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunerInit
</UL>

<P><STRONG><a name="[d0]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32f1xx_hal_tim.o(.text.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIM_IC_CaptureCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[c5]"></a>HAL_TIM_IC_ConfigChannel</STRONG> (Thumb, 1096 bytes, Stack size 24 bytes, stm32f1xx_hal_tim.o(.text.HAL_TIM_IC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_TIM_IC_ConfigChannel &rArr; TIM_TI1_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_SetConfig
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI4_SetConfig
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI3_SetConfig
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[ca]"></a>HAL_TIM_IC_Init</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, stm32f1xx_hal_tim.o(.text.HAL_TIM_IC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = HAL_TIM_IC_Init &rArr; HAL_TIM_IC_MspInit &rArr; HAL_GPIO_Init &rArr; assert_failed
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_MspInit
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[cb]"></a>HAL_TIM_IC_MspInit</STRONG> (Thumb, 180 bytes, Stack size 48 bytes, tim.o(.text.HAL_TIM_IC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_TIM_IC_MspInit &rArr; HAL_GPIO_Init &rArr; assert_failed
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Init
</UL>

<P><STRONG><a name="[cd]"></a>HAL_TIM_IC_Start_IT</STRONG> (Thumb, 1162 bytes, Stack size 72 bytes, stm32f1xx_hal_tim.o(.text.HAL_TIM_IC_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_TIM_IC_Start_IT &rArr; TIM_CCxChannelCmd &rArr; assert_failed
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[cf]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 634 bytes, Stack size 16 bytes, stm32f1xx_hal_tim.o(.text.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_TIM_IRQHandler &rArr; HAL_TIMEx_CommutCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutCallback
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[d7]"></a>HAL_TIM_MspPostInit</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, tim.o(.text.HAL_TIM_MspPostInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init &rArr; assert_failed
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
</UL>

<P><STRONG><a name="[d1]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32f1xx_hal_tim.o(.text.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIM_OC_DelayElapsedCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[d8]"></a>HAL_TIM_PWM_ConfigChannel</STRONG> (Thumb, 1126 bytes, Stack size 32 bytes, stm32f1xx_hal_tim.o(.text.HAL_TIM_PWM_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_TIM_PWM_ConfigChannel &rArr; TIM_OC2_SetConfig &rArr; assert_failed
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2_SetConfig
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4_SetConfig
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3_SetConfig
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
</UL>

<P><STRONG><a name="[dd]"></a>HAL_TIM_PWM_Init</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, stm32f1xx_hal_tim.o(.text.HAL_TIM_PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_TIM_PWM_Init &rArr; HAL_TIM_PWM_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_MspInit
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
</UL>

<P><STRONG><a name="[de]"></a>HAL_TIM_PWM_MspInit</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, tim.o(.text.HAL_TIM_PWM_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_TIM_PWM_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
</UL>

<P><STRONG><a name="[d2]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32f1xx_hal_tim.o(.text.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIM_PWM_PulseFinishedCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[df]"></a>HAL_TIM_PWM_Start</STRONG> (Thumb, 970 bytes, Stack size 56 bytes, stm32f1xx_hal_tim.o(.text.HAL_TIM_PWM_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_TIM_PWM_Start &rArr; TIM_CCxChannelCmd &rArr; assert_failed
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunerInit
</UL>

<P><STRONG><a name="[d3]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32f1xx_hal_tim.o(.text.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[e0]"></a>HAL_TIM_ReadCapturedValue</STRONG> (Thumb, 734 bytes, Stack size 24 bytes, stm32f1xx_hal_tim.o(.text.HAL_TIM_ReadCapturedValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_TIM_ReadCapturedValue &rArr; assert_failed
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_IRQHandler
</UL>

<P><STRONG><a name="[d5]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32f1xx_hal_tim.o(.text.HAL_TIM_TriggerCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIM_TriggerCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[e1]"></a>HAL_UART_Init</STRONG> (Thumb, 444 bytes, Stack size 16 bytes, stm32f1xx_hal_uart.o(.text.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init &rArr; assert_failed
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[e2]"></a>HAL_UART_MspInit</STRONG> (Thumb, 152 bytes, Stack size 48 bytes, usart.o(.text.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init &rArr; assert_failed
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[e4]"></a>HAL_UART_Transmit</STRONG> (Thumb, 334 bytes, Stack size 48 bytes, stm32f1xx_hal_uart.o(.text.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_it.o(.text.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>I2C_ReadByte</STRONG> (Thumb, 246 bytes, Stack size 16 bytes, soft_i2c.o(.text.I2C_ReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = I2C_ReadByte &rArr; I2C_Delay &rArr; HAL_Delay_us &rArr; HAL_SYSTICK_Config &rArr; SysTick_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Stat
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckUpdateSig
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRFStatReg
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitEasyReady
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_query1
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_word
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_byte
</UL>

<P><STRONG><a name="[91]"></a>I2C_Restart</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, soft_i2c.o(.text.I2C_Restart))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = I2C_Restart &rArr; I2C_Start &rArr; I2C_WriteByte &rArr; I2C_Delay &rArr; HAL_Delay_us &rArr; HAL_SYSTICK_Config &rArr; SysTick_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Delay
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Stat
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckUpdateSig
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRFStatReg
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_query1
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_word
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_byte
</UL>

<P><STRONG><a name="[e7]"></a>I2C_Start</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, soft_i2c.o(.text.I2C_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = I2C_Start &rArr; I2C_WriteByte &rArr; I2C_Delay &rArr; HAL_Delay_us &rArr; HAL_SYSTICK_Config &rArr; SysTick_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Delay
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitEasyReady
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_write_data
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_start_subaddr3
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_start_subaddr
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_erase_full_chip
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_word
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_byte
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_word
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Restart
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_byte
</UL>

<P><STRONG><a name="[93]"></a>I2C_Stop</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, soft_i2c.o(.text.I2C_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = I2C_Stop &rArr; I2C_Delay &rArr; HAL_Delay_us &rArr; HAL_SYSTICK_Config &rArr; SysTick_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSineFreq
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Stat
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckUpdateSig
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRFStatReg
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TuneReg
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBalFader
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTone
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVolume
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitEasyReady
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_write_data
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_write1
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_query1
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_erase_full_chip
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_word
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_byte
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_word
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_byte
</UL>

<P><STRONG><a name="[e8]"></a>I2C_WriteByte</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, soft_i2c.o(.text.I2C_WriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = I2C_WriteByte &rArr; I2C_Delay &rArr; HAL_Delay_us &rArr; HAL_SYSTICK_Config &rArr; SysTick_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSineFreq
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TuneReg
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBalFader
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTone
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVolume
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_write_data
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_write1
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_start_subaddr3
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_start_subaddr
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_erase_full_chip
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_word
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_byte
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_word
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_byte
</UL>

<P><STRONG><a name="[a1]"></a>IR_Check</STRONG> (Thumb, 430 bytes, Stack size 24 bytes, ui.o(.text.IR_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = IR_Check &rArr; processRemoteInput &rArr; switchFMChannel &rArr; ProcBand &rArr; SeekCh &rArr; LCDUpdate &rArr; OLED_XYStrLen &rArr; OLED_XYChar &rArr; OLED_ShowChar &rArr; DispChar &rArr; OLED_address &rArr; transfer_command &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processRemoteInput
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Display_On
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckUpdateAlt
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddSyncBits
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey
</UL>

<P><STRONG><a name="[eb]"></a>IsMenuVisible</STRONG> (Thumb, 354 bytes, Stack size 16 bytes, ui.o(.text.IsMenuVisible))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = IsMenuVisible &rArr; dsp_query1 &rArr; dsp_start_subaddr &rArr; I2C_Start &rArr; I2C_WriteByte &rArr; I2C_Delay &rArr; HAL_Delay_us &rArr; HAL_SYSTICK_Config &rArr; SysTick_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_query1
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcSubMenu
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunerInit
</UL>

<P><STRONG><a name="[ed]"></a>IsSigOK</STRONG> (Thumb, 410 bytes, Stack size 16 bytes, tuner.o(.text.IsSigOK))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = IsSigOK &rArr; GetRFStatReg &rArr; dsp_start_subaddr &rArr; I2C_Start &rArr; I2C_WriteByte &rArr; I2C_Delay &rArr; HAL_Delay_us &rArr; HAL_SYSTICK_Config &rArr; SysTick_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRFStatReg
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_SCSV
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanAny
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Seek
</UL>

<P><STRONG><a name="[85]"></a>LCDUpdate</STRONG> (Thumb, 472 bytes, Stack size 32 bytes, ui.o(.text.LCDUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = LCDUpdate &rArr; OLED_XYStrLen &rArr; OLED_XYChar &rArr; OLED_ShowChar &rArr; DispChar &rArr; OLED_address &rArr; transfer_command &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_XYStrLen
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Refresh
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_XYUIntLenZP
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_XYChar
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_XYIntLen
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_XYStr
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Sine
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Help
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_SCSV
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_BalFader
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Tone
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchAMChannel
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchFMChannel
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDelCh
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunerLoop
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunerInit
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanAny
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Seek
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeekCh
</UL>

<P><STRONG><a name="[f0]"></a>MX_GPIO_Init</STRONG> (Thumb, 718 bytes, Stack size 104 bytes, gpio.o(.text.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init &rArr; assert_failed
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f1]"></a>MX_SPI1_Init</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, spi.o(.text.MX_SPI1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = MX_SPI1_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init &rArr; assert_failed
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f3]"></a>MX_SPI2_Init</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, spi.o(.text.MX_SPI2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = MX_SPI2_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init &rArr; assert_failed
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f4]"></a>MX_TIM2_Init</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, tim.o(.text.MX_TIM2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = MX_TIM2_Init &rArr; HAL_TIM_IC_Init &rArr; HAL_TIM_IC_MspInit &rArr; HAL_GPIO_Init &rArr; assert_failed
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Start_IT
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_ConfigChannel
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f5]"></a>MX_TIM3_Init</STRONG> (Thumb, 154 bytes, Stack size 48 bytes, tim.o(.text.MX_TIM3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = MX_TIM3_Init &rArr; HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init &rArr; assert_failed
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f6]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, usart.o(.text.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init &rArr; assert_failed
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_it.o(.text.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[f7]"></a>Menu</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ui.o(.text.Menu))
<BR><BR>[Stack]<UL><LI>Max Depth = 976<LI>Call Chain = Menu &rArr; ProcMenuItem &rArr; Menu_Help &rArr; GetKey &rArr; IR_Check &rArr; processRemoteInput &rArr; switchFMChannel &rArr; ProcBand &rArr; SeekCh &rArr; LCDUpdate &rArr; OLED_XYStrLen &rArr; OLED_XYChar &rArr; OLED_ShowChar &rArr; DispChar &rArr; OLED_address &rArr; transfer_command &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcMenuItem
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear2
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunerLoop
</UL>

<P><STRONG><a name="[f9]"></a>Menu_AGC</STRONG> (Thumb, 262 bytes, Stack size 32 bytes, ui.o(.text.Menu_AGC))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = Menu_AGC &rArr; GetKey &rArr; IR_Check &rArr; processRemoteInput &rArr; switchFMChannel &rArr; ProcBand &rArr; SeekCh &rArr; LCDUpdate &rArr; OLED_XYStrLen &rArr; OLED_XYChar &rArr; OLED_ShowChar &rArr; DispChar &rArr; OLED_address &rArr; transfer_command &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear2
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRRot
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckUpdateSig
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Refresh
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_XYIntLen
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRFCtrlReg
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddSyncBits
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLRot
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_XYStr
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcMenuItem
</UL>

<P><STRONG><a name="[fb]"></a>Menu_AnyHoldTime</STRONG> (Thumb, 262 bytes, Stack size 24 bytes, ui.o(.text.Menu_AnyHoldTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = Menu_AnyHoldTime &rArr; GetKey &rArr; IR_Check &rArr; processRemoteInput &rArr; switchFMChannel &rArr; ProcBand &rArr; SeekCh &rArr; LCDUpdate &rArr; OLED_XYStrLen &rArr; OLED_XYChar &rArr; OLED_ShowChar &rArr; DispChar &rArr; OLED_address &rArr; transfer_command &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear2
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRRot
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckUpdateSig
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Refresh
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_XYIntLen
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLRot
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_XYStr
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_byte
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcMenuItem
</UL>

<P><STRONG><a name="[fd]"></a>Menu_BacklightAdj</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, ui.o(.text.Menu_BacklightAdj))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = Menu_BacklightAdj &rArr; GetKey &rArr; IR_Check &rArr; processRemoteInput &rArr; switchFMChannel &rArr; ProcBand &rArr; SeekCh &rArr; LCDUpdate &rArr; OLED_XYStrLen &rArr; OLED_XYChar &rArr; OLED_ShowChar &rArr; DispChar &rArr; OLED_address &rArr; transfer_command &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear2
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_SetBackLight
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRRot
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckUpdateSig
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Refresh
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_XYIntLen
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLRot
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_XYStr
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcMenuItem
</UL>

<P><STRONG><a name="[ff]"></a>Menu_BacklightKeep</STRONG> (Thumb, 262 bytes, Stack size 24 bytes, ui.o(.text.Menu_BacklightKeep))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = Menu_BacklightKeep &rArr; GetKey &rArr; IR_Check &rArr; processRemoteInput &rArr; switchFMChannel &rArr; ProcBand &rArr; SeekCh &rArr; LCDUpdate &rArr; OLED_XYStrLen &rArr; OLED_XYChar &rArr; OLED_ShowChar &rArr; DispChar &rArr; OLED_address &rArr; transfer_command &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear2
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRRot
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckUpdateSig
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Refresh
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_XYIntLen
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLRot
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_XYStr
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_byte
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcMenuItem
</UL>

<P><STRONG><a name="[100]"></a>Menu_BalFader</STRONG> (Thumb, 428 bytes, Stack size 32 bytes, ui.o(.text.Menu_BalFader))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = Menu_BalFader &rArr; GetKey &rArr; IR_Check &rArr; processRemoteInput &rArr; switchFMChannel &rArr; ProcBand &rArr; SeekCh &rArr; LCDUpdate &rArr; OLED_XYStrLen &rArr; OLED_XYChar &rArr; OLED_ShowChar &rArr; DispChar &rArr; OLED_address &rArr; transfer_command &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_FullStr
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear1
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear2
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRRot
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDUpdate
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Refresh
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_XYChar
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_XYIntLen
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TuneFreqDisp
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBalFader
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddSyncBits
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLRot
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcMenuItem
</UL>

<P><STRONG><a name="[104]"></a>Menu_FMDynamicBW</STRONG> (Thumb, 262 bytes, Stack size 32 bytes, ui.o(.text.Menu_FMDynamicBW))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = Menu_FMDynamicBW &rArr; GetKey &rArr; IR_Check &rArr; processRemoteInput &rArr; switchFMChannel &rArr; ProcBand &rArr; SeekCh &rArr; LCDUpdate &rArr; OLED_XYStrLen &rArr; OLED_XYChar &rArr; OLED_ShowChar &rArr; DispChar &rArr; OLED_address &rArr; transfer_command &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear2
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRRot
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckUpdateSig
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Refresh
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_XYIntLen
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRFCtrlReg
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddSyncBits
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLRot
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_XYStr
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcMenuItem
</UL>

<P><STRONG><a name="[105]"></a>Menu_Help</STRONG> (Thumb, 476 bytes, Stack size 296 bytes, ui.o(.text.Menu_Help))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = Menu_Help &rArr; GetKey &rArr; IR_Check &rArr; processRemoteInput &rArr; switchFMChannel &rArr; ProcBand &rArr; SeekCh &rArr; LCDUpdate &rArr; OLED_XYStrLen &rArr; OLED_XYChar &rArr; OLED_ShowChar &rArr; DispChar &rArr; OLED_address &rArr; transfer_command &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_FullStr
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tipsForLRorAnykey
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear1
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear2
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRRot
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDUpdate
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Refresh
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TuneFreqDisp
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLRot
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_XYStr
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcMenuItem
</UL>

<P><STRONG><a name="[109]"></a>Menu_NoiseBlanker</STRONG> (Thumb, 262 bytes, Stack size 32 bytes, ui.o(.text.Menu_NoiseBlanker))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = Menu_NoiseBlanker &rArr; GetKey &rArr; IR_Check &rArr; processRemoteInput &rArr; switchFMChannel &rArr; ProcBand &rArr; SeekCh &rArr; LCDUpdate &rArr; OLED_XYStrLen &rArr; OLED_XYChar &rArr; OLED_ShowChar &rArr; DispChar &rArr; OLED_address &rArr; transfer_command &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear2
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRRot
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckUpdateSig
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Refresh
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_XYIntLen
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRFCtrlReg
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddSyncBits
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLRot
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_XYStr
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcMenuItem
</UL>

<P><STRONG><a name="[10a]"></a>Menu_SCSV</STRONG> (Thumb, 698 bytes, Stack size 24 bytes, ui.o(.text.Menu_SCSV))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = Menu_SCSV &rArr; YesNo &rArr; GetKey &rArr; IR_Check &rArr; processRemoteInput &rArr; switchFMChannel &rArr; ProcBand &rArr; SeekCh &rArr; LCDUpdate &rArr; OLED_XYStrLen &rArr; OLED_XYChar &rArr; OLED_ShowChar &rArr; DispChar &rArr; OLED_address &rArr; transfer_command &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YesNo
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear1
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckUpdateSig
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSigOK
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRFStatReg
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDUpdate
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeekCh
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteChFreq
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Refresh
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TuneFreqDisp
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdjFreq
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFilter
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_set_filter
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckUpdateAlt
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddSyncBits
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVolume
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_XYStr
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcMenuItem
</UL>

<P><STRONG><a name="[10f]"></a>Menu_ScanStayTime</STRONG> (Thumb, 262 bytes, Stack size 24 bytes, ui.o(.text.Menu_ScanStayTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = Menu_ScanStayTime &rArr; GetKey &rArr; IR_Check &rArr; processRemoteInput &rArr; switchFMChannel &rArr; ProcBand &rArr; SeekCh &rArr; LCDUpdate &rArr; OLED_XYStrLen &rArr; OLED_XYChar &rArr; OLED_ShowChar &rArr; DispChar &rArr; OLED_address &rArr; transfer_command &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear2
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRRot
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckUpdateSig
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Refresh
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_XYIntLen
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLRot
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_XYStr
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_byte
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcMenuItem
</UL>

<P><STRONG><a name="[110]"></a>Menu_Sine</STRONG> (Thumb, 950 bytes, Stack size 56 bytes, ui.o(.text.Menu_Sine))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = Menu_Sine &rArr; GetKey &rArr; IR_Check &rArr; processRemoteInput &rArr; switchFMChannel &rArr; ProcBand &rArr; SeekCh &rArr; LCDUpdate &rArr; OLED_XYStrLen &rArr; OLED_XYChar &rArr; OLED_ShowChar &rArr; DispChar &rArr; OLED_address &rArr; transfer_command &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSineFreq
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_FullStr
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeekKey
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear1
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear2
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRRot
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDUpdate
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Refresh
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_XYChar
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_XYIntLen
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TuneFreqDisp
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLRot
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVolume
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_write_data
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_write1
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_XYStr
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcMenuItem
</UL>

<P><STRONG><a name="[113]"></a>Menu_Squelch</STRONG> (Thumb, 290 bytes, Stack size 24 bytes, ui.o(.text.Menu_Squelch))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = Menu_Squelch &rArr; GetKey &rArr; IR_Check &rArr; processRemoteInput &rArr; switchFMChannel &rArr; ProcBand &rArr; SeekCh &rArr; LCDUpdate &rArr; OLED_XYStrLen &rArr; OLED_XYChar &rArr; OLED_ShowChar &rArr; DispChar &rArr; OLED_address &rArr; transfer_command &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tipsForLRorAnykey
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear2
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRRot
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckUpdateSig
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Refresh
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_XYChar
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_XYIntLen
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLRot
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_XYStr
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_byte
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcMenuItem
</UL>

<P><STRONG><a name="[114]"></a>Menu_Stat</STRONG> (Thumb, 1592 bytes, Stack size 184 bytes, ui.o(.text.Menu_Stat))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = Menu_Stat &rArr; GetKey &rArr; IR_Check &rArr; processRemoteInput &rArr; switchFMChannel &rArr; ProcBand &rArr; SeekCh &rArr; LCDUpdate &rArr; OLED_XYStrLen &rArr; OLED_XYChar &rArr; OLED_ShowChar &rArr; DispChar &rArr; OLED_address &rArr; transfer_command &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_XYStrLen
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear2
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRRot
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckUpdateSig
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Refresh
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_XYChar
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_XYIntLen
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLRot
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_query1
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_start_subaddr
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_XYStr
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadByte
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Restart
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcMenuItem
</UL>

<P><STRONG><a name="[116]"></a>Menu_Stereo</STRONG> (Thumb, 264 bytes, Stack size 40 bytes, ui.o(.text.Menu_Stereo))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = Menu_Stereo &rArr; GetKey &rArr; IR_Check &rArr; processRemoteInput &rArr; switchFMChannel &rArr; ProcBand &rArr; SeekCh &rArr; LCDUpdate &rArr; OLED_XYStrLen &rArr; OLED_XYChar &rArr; OLED_ShowChar &rArr; DispChar &rArr; OLED_address &rArr; transfer_command &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear2
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRRot
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckUpdateSig
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Refresh
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_XYIntLen
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRFCtrlReg
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddSyncBits
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLRot
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_XYStr
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcMenuItem
</UL>

<P><STRONG><a name="[117]"></a>Menu_Time</STRONG> (Thumb, 840 bytes, Stack size 40 bytes, ui.o(.text.Menu_Time))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = Menu_Time &rArr; GetKey &rArr; IR_Check &rArr; processRemoteInput &rArr; switchFMChannel &rArr; ProcBand &rArr; SeekCh &rArr; LCDUpdate &rArr; OLED_XYStrLen &rArr; OLED_XYChar &rArr; OLED_ShowChar &rArr; DispChar &rArr; OLED_address &rArr; transfer_command &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear2
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRRot
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckUpdateSig
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Refresh
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_XYUIntLenZP
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLRot
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_XYStr
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcMenuItem
</UL>

<P><STRONG><a name="[118]"></a>Menu_Tone</STRONG> (Thumb, 558 bytes, Stack size 40 bytes, ui.o(.text.Menu_Tone))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = Menu_Tone &rArr; GetKey &rArr; IR_Check &rArr; processRemoteInput &rArr; switchFMChannel &rArr; ProcBand &rArr; SeekCh &rArr; LCDUpdate &rArr; OLED_XYStrLen &rArr; OLED_XYChar &rArr; OLED_ShowChar &rArr; DispChar &rArr; OLED_address &rArr; transfer_command &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_FullStr
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tipsForLRorAnykey
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear1
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear2
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRRot
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDUpdate
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Refresh
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_XYChar
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_XYIntLen
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TuneFreqDisp
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTone
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddSyncBits
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLRot
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcMenuItem
</UL>

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_it.o(.text.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[11a]"></a>NVMGetArgs</STRONG> (Thumb, 1354 bytes, Stack size 64 bytes, nv_memory.o(.text.NVMGetArgs))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = NVMGetArgs &rArr; NVMInitSetting &rArr; OLED_XYStr &rArr; OLED_ShowString &rArr; OLED_ShowChar &rArr; DispChar &rArr; OLED_address &rArr; transfer_command &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMInitSetting
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMInitStation
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_word
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunerInit
</UL>

<P><STRONG><a name="[11d]"></a>NVMInitSetting</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, nv_memory.o(.text.NVMInitSetting))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = NVMInitSetting &rArr; OLED_XYStr &rArr; OLED_ShowString &rArr; OLED_ShowChar &rArr; DispChar &rArr; OLED_address &rArr; transfer_command &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMUnpkWrData
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_XYStr
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processRemoteInput
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMGetArgs
</UL>

<P><STRONG><a name="[11c]"></a>NVMInitStation</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, nv_memory.o(.text.NVMInitStation))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = NVMInitStation &rArr; OLED_XYStr &rArr; OLED_ShowString &rArr; OLED_ShowChar &rArr; DispChar &rArr; OLED_address &rArr; transfer_command &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_XYStr
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_erase_full_chip
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_word
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processRemoteInput
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMGetArgs
</UL>

<P><STRONG><a name="[11f]"></a>NVMUnpkWrData</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, nv_memory.o(.text.NVMUnpkWrData))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = NVMUnpkWrData &rArr; eeprom_write_byte &rArr; I2C_Start &rArr; I2C_WriteByte &rArr; I2C_Delay &rArr; HAL_Delay_us &rArr; HAL_SYSTICK_Config &rArr; SysTick_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMInitSetting
</UL>

<P><STRONG><a name="[12d]"></a>NextFilter</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, tuner.o(.text.NextFilter))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcStepFilter
</UL>

<P><STRONG><a name="[102]"></a>OLED_Clear1</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lcd25696.o(.text.OLED_Clear1))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = OLED_Clear1 &rArr; OLED_XYStr &rArr; OLED_ShowString &rArr; OLED_ShowChar &rArr; DispChar &rArr; OLED_address &rArr; transfer_command &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_XYStr
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Sine
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Help
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_SCSV
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_BalFader
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Tone
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunerInit
</UL>

<P><STRONG><a name="[84]"></a>OLED_Clear2</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lcd25696.o(.text.OLED_Clear2))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = OLED_Clear2 &rArr; OLED_XYStr &rArr; OLED_ShowString &rArr; OLED_ShowChar &rArr; DispChar &rArr; OLED_address &rArr; transfer_command &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_XYStr
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcSubMenu
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Sine
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Help
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_BalFader
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Tone
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Stat
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Time
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_AnyHoldTime
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_ScanStayTime
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_BacklightKeep
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_BacklightAdj
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_NoiseBlanker
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Stereo
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_AGC
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_FMDynamicBW
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Squelch
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDelCh
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunerInit
</UL>

<P><STRONG><a name="[a3]"></a>OLED_Display_On</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, lcd25696.o(.text.OLED_Display_On))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OLED_Display_On &rArr; HAL_GPIO_WritePin &rArr; assert_failed
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_Check
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRRot
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanAny
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLRot
</UL>

<P><STRONG><a name="[101]"></a>OLED_FullStr</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, lcd25696.o(.text.OLED_FullStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = OLED_FullStr &rArr; OLED_XYChar &rArr; OLED_ShowChar &rArr; DispChar &rArr; OLED_address &rArr; transfer_command &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_XYChar
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Sine
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Help
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_BalFader
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Tone
</UL>

<P><STRONG><a name="[122]"></a>OLED_Init</STRONG> (Thumb, 426 bytes, Stack size 80 bytes, lcd25696.o(.text.OLED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = OLED_Init &rArr; DispFill &rArr; OLED_address &rArr; transfer_command &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispFill
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_command
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_data
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[83]"></a>OLED_Refresh</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd25696.o(.text.OLED_Refresh))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcSubMenu
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Sine
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Help
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_SCSV
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YesNo
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_BalFader
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Tone
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Stat
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Time
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_AnyHoldTime
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_ScanStayTime
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_BacklightKeep
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_BacklightAdj
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_NoiseBlanker
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Stereo
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_AGC
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_FMDynamicBW
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Squelch
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDelCh
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunerLoop
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunerInit
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDUpdate
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TuneFreqDisp
</UL>

<P><STRONG><a name="[fe]"></a>OLED_SetBackLight</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lcd25696.o(.text.OLED_SetBackLight))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OLED_SetBackLight &rArr; HAL_GPIO_WritePin &rArr; assert_failed
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_BacklightAdj
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunerLoop
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunerInit
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanAny
</UL>

<P><STRONG><a name="[124]"></a>OLED_ShowChar</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, lcd25696.o(.text.OLED_ShowChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = OLED_ShowChar &rArr; DispChar &rArr; OLED_address &rArr; transfer_command &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispChar
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_XYChar
</UL>

<P><STRONG><a name="[125]"></a>OLED_ShowString</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, lcd25696.o(.text.OLED_ShowString))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = OLED_ShowString &rArr; OLED_ShowChar &rArr; DispChar &rArr; OLED_address &rArr; transfer_command &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_XYStr
</UL>

<P><STRONG><a name="[98]"></a>OLED_XYChar</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lcd25696.o(.text.OLED_XYChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = OLED_XYChar &rArr; OLED_ShowChar &rArr; DispChar &rArr; OLED_address &rArr; transfer_command &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcSubMenu
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Sine
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_BalFader
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_FullStr
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Tone
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Stat
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Squelch
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_XYStrLen
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowTime
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckUpdateSig
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDUpdate
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_XYUIntLenZP
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_XYIntLen
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TuneFreqDisp
</UL>

<P><STRONG><a name="[7d]"></a>OLED_XYIntLen</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, lcd25696.o(.text.OLED_XYIntLen))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = OLED_XYIntLen &rArr; OLED_XYChar &rArr; OLED_ShowChar &rArr; DispChar &rArr; OLED_address &rArr; transfer_command &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_XYChar
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Sine
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_BalFader
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Tone
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Stat
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_AnyHoldTime
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_ScanStayTime
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_BacklightKeep
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_BacklightAdj
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_NoiseBlanker
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Stereo
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_AGC
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_FMDynamicBW
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Squelch
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowVol
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDelCh
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckUpdateSig
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDUpdate
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TuneFreqDisp
</UL>

<P><STRONG><a name="[76]"></a>OLED_XYStr</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lcd25696.o(.text.OLED_XYStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = OLED_XYStr &rArr; OLED_ShowString &rArr; OLED_ShowChar &rArr; DispChar &rArr; OLED_address &rArr; transfer_command &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Sine
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Help
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_SCSV
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YesNo
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Stat
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Time
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_AnyHoldTime
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_ScanStayTime
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_BacklightKeep
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_BacklightAdj
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_NoiseBlanker
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Stereo
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_AGC
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_FMDynamicBW
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Squelch
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowVol
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMisc
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDelCh
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear1
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear2
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunerInit
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDUpdate
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMInitSetting
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMInitStation
</UL>

<P><STRONG><a name="[ef]"></a>OLED_XYStrLen</STRONG> (Thumb, 258 bytes, Stack size 32 bytes, lcd25696.o(.text.OLED_XYStrLen))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = OLED_XYStrLen &rArr; OLED_XYChar &rArr; OLED_ShowChar &rArr; DispChar &rArr; OLED_address &rArr; transfer_command &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_XYChar
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcSubMenu
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Stat
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDUpdate
</UL>

<P><STRONG><a name="[7c]"></a>OLED_XYUIntLenZP</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, lcd25696.o(.text.OLED_XYUIntLenZP))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = OLED_XYUIntLenZP &rArr; OLED_XYChar &rArr; OLED_ShowChar &rArr; DispChar &rArr; OLED_address &rArr; transfer_command &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_XYChar
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Time
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowTime
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDelCh
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDUpdate
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TuneFreqDisp
</UL>

<P><STRONG><a name="[9c]"></a>OLED_address</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, lcd25696.o(.text.OLED_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = OLED_address &rArr; transfer_command &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_command
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_data
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispFill
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_screen
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispChar
</UL>

<P><STRONG><a name="[14c]"></a>OLED_delay</STRONG> (Thumb, 58 bytes, Stack size 4 bytes, lcd25696.o(.text.OLED_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = OLED_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_command
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_data
</UL>

<P><STRONG><a name="[13c]"></a>Paser_IRCode</STRONG> (Thumb, 238 bytes, Stack size 4 bytes, stm32f1xx_it.o(.text.Paser_IRCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Paser_IRCode
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_IRQHandler
</UL>

<P><STRONG><a name="[a2]"></a>PeekKey</STRONG> (Thumb, 256 bytes, Stack size 16 bytes, ui.o(.text.PeekKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PeekKey &rArr; HAL_GPIO_ReadPin &rArr; assert_failed
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Sine
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey
</UL>

<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(.text.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[126]"></a>ProcBand</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, tuner.o(.text.ProcBand))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = ProcBand &rArr; SeekCh &rArr; LCDUpdate &rArr; OLED_XYStrLen &rArr; OLED_XYChar &rArr; OLED_ShowChar &rArr; DispChar &rArr; OLED_address &rArr; transfer_command &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRFMode
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeekCh
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TuneFreqDisp
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRFCtrlReg
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddSyncBits
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcMenuItem
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchAMChannel
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchFMChannel
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunerLoop
</UL>

<P><STRONG><a name="[f8]"></a>ProcMenuItem</STRONG> (Thumb, 1114 bytes, Stack size 16 bytes, ui.o(.text.ProcMenuItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 960<LI>Call Chain = ProcMenuItem &rArr; Menu_Help &rArr; GetKey &rArr; IR_Check &rArr; processRemoteInput &rArr; switchFMChannel &rArr; ProcBand &rArr; SeekCh &rArr; LCDUpdate &rArr; OLED_XYStrLen &rArr; OLED_XYChar &rArr; OLED_ShowChar &rArr; DispChar &rArr; OLED_address &rArr; transfer_command &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcSubMenu
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Sine
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Help
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_SCSV
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_BalFader
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Tone
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Stat
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Time
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_AnyHoldTime
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_ScanStayTime
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_BacklightKeep
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_BacklightAdj
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_NoiseBlanker
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Stereo
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_AGC
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_FMDynamicBW
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Squelch
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMode_AUX
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMode_RF
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcBand
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TuneReg
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRFCtrlReg
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFilter
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBalFader
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTone
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddSyncBits
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVolume
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootDirana3
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcSubMenu
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu
</UL>

<P><STRONG><a name="[12c]"></a>ProcStepFilter</STRONG> (Thumb, 264 bytes, Stack size 16 bytes, tuner.o(.text.ProcStepFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = ProcStepFilter &rArr; SetFilter &rArr; dsp_set_filter &rArr; dsp_write1 &rArr; dsp_start_subaddr &rArr; I2C_Start &rArr; I2C_WriteByte &rArr; I2C_Delay &rArr; HAL_Delay_us &rArr; HAL_SYSTICK_Config &rArr; SysTick_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFilter
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NextFilter
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddSyncBits
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunerLoop
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanAny
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Seek
</UL>

<P><STRONG><a name="[128]"></a>ProcSubMenu</STRONG> (Thumb, 1190 bytes, Stack size 40 bytes, ui.o(.text.ProcSubMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + In Cycle
<LI>Call Chain = ProcSubMenu &rArr;  ProcMenuItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcMenuItem
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_XYStrLen
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsMenuVisible
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear2
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRRot
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckUpdateSig
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Refresh
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_XYChar
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLRot
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcMenuItem
</UL>

<P><STRONG><a name="[7b]"></a>ReadChFreq</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, tuner.o(.text.ReadChFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = ReadChFreq &rArr; eeprom_read_word &rArr; I2C_Restart &rArr; I2C_Start &rArr; I2C_WriteByte &rArr; I2C_Delay &rArr; HAL_Delay_us &rArr; HAL_SYSTICK_Config &rArr; SysTick_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_word
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDelCh
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeekCh
</UL>

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[12f]"></a>ScanAny</STRONG> (Thumb, 428 bytes, Stack size 24 bytes, tuner.o(.text.ScanAny))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = ScanAny &rArr; Seek &rArr; GetKey &rArr; IR_Check &rArr; processRemoteInput &rArr; switchFMChannel &rArr; ProcBand &rArr; SeekCh &rArr; LCDUpdate &rArr; OLED_XYStrLen &rArr; OLED_XYChar &rArr; OLED_ShowChar &rArr; DispChar &rArr; OLED_address &rArr; transfer_command &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_SetBackLight
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRRot
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Display_On
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckUpdateSig
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Seek
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSigOK
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcStepFilter
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDUpdate
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckUpdateAlt
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckVolume
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunerLoop
</UL>

<P><STRONG><a name="[130]"></a>Seek</STRONG> (Thumb, 402 bytes, Stack size 24 bytes, tuner.o(.text.Seek))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = Seek &rArr; GetKey &rArr; IR_Check &rArr; processRemoteInput &rArr; switchFMChannel &rArr; ProcBand &rArr; SeekCh &rArr; LCDUpdate &rArr; OLED_XYStrLen &rArr; OLED_XYChar &rArr; OLED_ShowChar &rArr; DispChar &rArr; OLED_address &rArr; transfer_command &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckUpdateSig
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSigOK
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRFStatReg
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcStepFilter
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDUpdate
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TuneFreqDisp
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdjFreq
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFilter
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_set_filter
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckUpdateAlt
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckVolume
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVolume
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunerLoop
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanAny
</UL>

<P><STRONG><a name="[10e]"></a>SeekCh</STRONG> (Thumb, 330 bytes, Stack size 24 bytes, tuner.o(.text.SeekCh))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = SeekCh &rArr; LCDUpdate &rArr; OLED_XYStrLen &rArr; OLED_XYChar &rArr; OLED_ShowChar &rArr; DispChar &rArr; OLED_address &rArr; transfer_command &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDUpdate
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadChFreq
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TuneFreqDisp
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_SCSV
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunerLoop
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunerInit
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcBand
</UL>

<P><STRONG><a name="[103]"></a>SetBalFader</STRONG> (Thumb, 304 bytes, Stack size 24 bytes, tuner.o(.text.SetBalFader))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SetBalFader &rArr; dsp_start_subaddr3 &rArr; I2C_Start &rArr; I2C_WriteByte &rArr; I2C_Delay &rArr; HAL_Delay_us &rArr; HAL_SYSTICK_Config &rArr; SysTick_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_start_subaddr3
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcMenuItem
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_BalFader
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunerInit
</UL>

<P><STRONG><a name="[10d]"></a>SetFilter</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, tuner.o(.text.SetFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SetFilter &rArr; dsp_set_filter &rArr; dsp_write1 &rArr; dsp_start_subaddr &rArr; I2C_Start &rArr; I2C_WriteByte &rArr; I2C_Delay &rArr; HAL_Delay_us &rArr; HAL_SYSTICK_Config &rArr; SysTick_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_set_filter
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddSyncBits
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcMenuItem
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_SCSV
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Seek
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcStepFilter
</UL>

<P><STRONG><a name="[129]"></a>SetMode_AUX</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, tuner.o(.text.SetMode_AUX))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SetMode_AUX &rArr; dsp_write_data &rArr; WaitEasyReady &rArr; dsp_start_subaddr3 &rArr; I2C_Start &rArr; I2C_WriteByte &rArr; I2C_Delay &rArr; HAL_Delay_us &rArr; HAL_SYSTICK_Config &rArr; SysTick_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddSyncBits
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_write_data
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcMenuItem
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunerInit
</UL>

<P><STRONG><a name="[12a]"></a>SetMode_RF</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, tuner.o(.text.SetMode_RF))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SetMode_RF &rArr; dsp_write_data &rArr; WaitEasyReady &rArr; dsp_start_subaddr3 &rArr; I2C_Start &rArr; I2C_WriteByte &rArr; I2C_Delay &rArr; HAL_Delay_us &rArr; HAL_SYSTICK_Config &rArr; SysTick_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRFMode
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddSyncBits
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_write_data
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcMenuItem
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunerInit
</UL>

<P><STRONG><a name="[fa]"></a>SetRFCtrlReg</STRONG> (Thumb, 516 bytes, Stack size 16 bytes, tuner.o(.text.SetRFCtrlReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SetRFCtrlReg &rArr; dsp_write_data &rArr; WaitEasyReady &rArr; dsp_start_subaddr3 &rArr; I2C_Start &rArr; I2C_WriteByte &rArr; I2C_Delay &rArr; HAL_Delay_us &rArr; HAL_SYSTICK_Config &rArr; SysTick_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_write_data
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_write1
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcMenuItem
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_NoiseBlanker
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Stereo
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_AGC
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_FMDynamicBW
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunerInit
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcBand
</UL>

<P><STRONG><a name="[127]"></a>SetRFMode</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, tuner.o(.text.SetRFMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SetRFMode &rArr; AddSyncBits
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddSyncBits
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMode_RF
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcBand
</UL>

<P><STRONG><a name="[111]"></a>SetSineFreq</STRONG> (Thumb, 298 bytes, Stack size 48 bytes, ui.o(.text.SetSineFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = SetSineFreq &rArr; cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpeq
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmple
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_start_subaddr3
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteByte
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Sine
</UL>

<P><STRONG><a name="[119]"></a>SetTone</STRONG> (Thumb, 310 bytes, Stack size 40 bytes, tuner.o(.text.SetTone))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SetTone &rArr; WaitEasyReady &rArr; dsp_start_subaddr3 &rArr; I2C_Start &rArr; I2C_WriteByte &rArr; I2C_Delay &rArr; HAL_Delay_us &rArr; HAL_SYSTICK_Config &rArr; SysTick_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitEasyReady
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_start_subaddr3
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcMenuItem
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Tone
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunerInit
</UL>

<P><STRONG><a name="[10b]"></a>SetVolume</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, tuner.o(.text.SetVolume))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SetVolume &rArr; dsp_start_subaddr3 &rArr; I2C_Start &rArr; I2C_WriteByte &rArr; I2C_Delay &rArr; HAL_Delay_us &rArr; HAL_SYSTICK_Config &rArr; SysTick_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_start_subaddr3
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcMenuItem
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Sine
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_SCSV
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunerLoop
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunerInit
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Seek
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVolumeThr
</UL>

<P><STRONG><a name="[9a]"></a>SetVolumeThr</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, tuner.o(.text.SetVolumeThr))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SetVolumeThr &rArr; SetVolume &rArr; dsp_start_subaddr3 &rArr; I2C_Start &rArr; I2C_WriteByte &rArr; I2C_Delay &rArr; HAL_Delay_us &rArr; HAL_SYSTICK_Config &rArr; SysTick_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVolume
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckVolume
</UL>

<P><STRONG><a name="[8d]"></a>ShowMisc</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, ui.o(.text.ShowMisc))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = ShowMisc &rArr; OLED_XYStr &rArr; OLED_ShowString &rArr; OLED_ShowChar &rArr; DispChar &rArr; OLED_address &rArr; transfer_command &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_XYStr
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckUpdateAlt
</UL>

<P><STRONG><a name="[8e]"></a>ShowTime</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, ui.o(.text.ShowTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = ShowTime &rArr; OLED_XYUIntLenZP &rArr; OLED_XYChar &rArr; OLED_ShowChar &rArr; DispChar &rArr; OLED_address &rArr; transfer_command &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_XYUIntLenZP
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_XYChar
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckUpdateAlt
</UL>

<P><STRONG><a name="[8f]"></a>ShowVol</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ui.o(.text.ShowVol))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = ShowVol &rArr; OLED_XYIntLen &rArr; OLED_XYChar &rArr; OLED_ShowChar &rArr; DispChar &rArr; OLED_address &rArr; transfer_command &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_XYIntLen
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_XYStr
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckUpdateAlt
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, stm32f1xx_it.o(.text.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SysTick_Handler &rArr; ThrottleFunction &rArr; __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThrottleFunction
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[139]"></a>SystemClock_Config</STRONG> (Thumb, 108 bytes, Stack size 72 bytes, main.o(.text.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[47]"></a>SystemInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_stm32f1xx.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(.text)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f1xx_it.o(.text.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TIM2_IRQHandler &rArr; TIM_IRQHandler &rArr; HAL_TIM_ReadCapturedValue &rArr; assert_failed
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_IRQHandler
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f1xx_it.o(.text.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = TIM3_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIMEx_CommutCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[cc]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 416 bytes, Stack size 12 bytes, stm32f1xx_hal_tim.o(.text.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Init
</UL>

<P><STRONG><a name="[ce]"></a>TIM_CCxChannelCmd</STRONG> (Thumb, 320 bytes, Stack size 24 bytes, stm32f1xx_hal_tim.o(.text.TIM_CCxChannelCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM_CCxChannelCmd &rArr; assert_failed
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Start_IT
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
</UL>

<P><STRONG><a name="[13b]"></a>TIM_IRQHandler</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, stm32f1xx_it.o(.text.TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TIM_IRQHandler &rArr; HAL_TIM_ReadCapturedValue &rArr; assert_failed
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Paser_IRCode
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ReadCapturedValue
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[da]"></a>TIM_OC2_SetConfig</STRONG> (Thumb, 368 bytes, Stack size 32 bytes, stm32f1xx_hal_tim.o(.text.TIM_OC2_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TIM_OC2_SetConfig &rArr; assert_failed
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[c6]"></a>TIM_TI1_SetConfig</STRONG> (Thumb, 280 bytes, Stack size 28 bytes, stm32f1xx_hal_tim.o(.text.TIM_TI1_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = TIM_TI1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_ConfigChannel
</UL>

<P><STRONG><a name="[137]"></a>ThrottleFunction</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, tuner.o(.text.ThrottleFunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ThrottleFunction &rArr; __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBandName
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[13e]"></a>TuneFreq</STRONG> (Thumb, 322 bytes, Stack size 16 bytes, tuner.o(.text.TuneFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = TuneFreq &rArr; TuneReg &rArr; dsp_start_subaddr &rArr; I2C_Start &rArr; I2C_WriteByte &rArr; I2C_Delay &rArr; HAL_Delay_us &rArr; HAL_SYSTICK_Config &rArr; SysTick_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TuneReg
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TuneFreqDisp
</UL>

<P><STRONG><a name="[7a]"></a>TuneFreqDisp</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, tuner.o(.text.TuneFreqDisp))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = TuneFreqDisp &rArr; OLED_XYUIntLenZP &rArr; OLED_XYChar &rArr; OLED_ShowChar &rArr; DispChar &rArr; OLED_address &rArr; transfer_command &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Refresh
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_XYUIntLenZP
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_XYChar
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_XYIntLen
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TuneFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Sine
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Help
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_SCSV
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_BalFader
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Tone
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchAMChannel
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchFMChannel
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDelCh
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunerLoop
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunerInit
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Seek
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcBand
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeekCh
</UL>

<P><STRONG><a name="[12b]"></a>TuneReg</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, tuner.o(.text.TuneReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = TuneReg &rArr; dsp_start_subaddr &rArr; I2C_Start &rArr; I2C_WriteByte &rArr; I2C_Delay &rArr; HAL_Delay_us &rArr; HAL_SYSTICK_Config &rArr; SysTick_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_start_subaddr
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcMenuItem
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TuneFreq
</UL>

<P><STRONG><a name="[13f]"></a>TunerInit</STRONG> (Thumb, 396 bytes, Stack size 24 bytes, tuner.o(.text.TunerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = TunerInit &rArr; NVMGetArgs &rArr; NVMInitSetting &rArr; OLED_XYStr &rArr; OLED_ShowString &rArr; OLED_ShowChar &rArr; DispChar &rArr; OLED_address &rArr; transfer_command &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear1
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsMenuVisible
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear2
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMode_AUX
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMode_RF
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_SetBackLight
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDUpdate
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeekCh
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Refresh
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TuneFreqDisp
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRFCtrlReg
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBalFader
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTone
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVolume
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootDirana3
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMGetArgs
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_XYStr
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[140]"></a>TunerLoop</STRONG> (Thumb, 2486 bytes, Stack size 40 bytes, tuner.o(.text.TunerLoop))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016<LI>Call Chain = TunerLoop &rArr; Menu &rArr; ProcMenuItem &rArr; Menu_Help &rArr; GetKey &rArr; IR_Check &rArr; processRemoteInput &rArr; switchFMChannel &rArr; ProcBand &rArr; SeekCh &rArr; LCDUpdate &rArr; OLED_XYStrLen &rArr; OLED_XYChar &rArr; OLED_ShowChar &rArr; DispChar &rArr; OLED_address &rArr; transfer_command &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTurnName
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDelCh
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_SetBackLight
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRRot
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanAny
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckUpdateSig
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Seek
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcStepFilter
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcBand
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDUpdate
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SeekCh
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Refresh
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TuneFreqDisp
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdjFreq
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckUpdateAlt
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddSyncBits
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckVolume
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVolume
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBandName
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_word
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_byte
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_it.o(.text.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[134]"></a>WaitEasyReady</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, tuner.o(.text.WaitEasyReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = WaitEasyReady &rArr; dsp_start_subaddr3 &rArr; I2C_Start &rArr; I2C_WriteByte &rArr; I2C_Delay &rArr; HAL_Delay_us &rArr; HAL_SYSTICK_Config &rArr; SysTick_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_start_subaddr3
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadByte
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTone
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_write_data
</UL>

<P><STRONG><a name="[80]"></a>WriteChFreq</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, tuner.o(.text.WriteChFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = WriteChFreq &rArr; eeprom_write_word &rArr; I2C_Start &rArr; I2C_WriteByte &rArr; I2C_Delay &rArr; HAL_Delay_us &rArr; HAL_SYSTICK_Config &rArr; SysTick_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_write_word
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_SCSV
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDelCh
</UL>

<P><STRONG><a name="[7f]"></a>YesNo</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, ui.o(.text.YesNo))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = YesNo &rArr; GetKey &rArr; IR_Check &rArr; processRemoteInput &rArr; switchFMChannel &rArr; ProcBand &rArr; SeekCh &rArr; LCDUpdate &rArr; OLED_XYStrLen &rArr; OLED_XYChar &rArr; OLED_ShowChar &rArr; DispChar &rArr; OLED_address &rArr; transfer_command &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckUpdateSig
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Refresh
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_XYStr
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_SCSV
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDelCh
</UL>

<P><STRONG><a name="[ac]"></a>assert_failed</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, main.o(.text.assert_failed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ReadCapturedValue
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Start_IT
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_ConfigChannel
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2_SetConfig
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4_SetConfig
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3_SetConfig
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1_SetConfig
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>

<P><STRONG><a name="[142]"></a>clear_screen</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, lcd25696.o(.text.clear_screen))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = clear_screen &rArr; OLED_address &rArr; transfer_command &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_data
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_address
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[97]"></a>constrain</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, nv_memory.o(.text.constrain))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = constrain
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Sine
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_BalFader
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Tone
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_AnyHoldTime
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_ScanStayTime
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_NoiseBlanker
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Stereo
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_AGC
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_FMDynamicBW
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Squelch
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunerLoop
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckUpdateSig
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadChFreq
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckVolume
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMGetArgs
</UL>

<P><STRONG><a name="[ec]"></a>dsp_query1</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, tuner.o(.text.dsp_query1))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = dsp_query1 &rArr; dsp_start_subaddr &rArr; I2C_Start &rArr; I2C_WriteByte &rArr; I2C_Delay &rArr; HAL_Delay_us &rArr; HAL_SYSTICK_Config &rArr; SysTick_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_start_subaddr
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadByte
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Restart
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Stat
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsMenuVisible
</UL>

<P><STRONG><a name="[10c]"></a>dsp_set_filter</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, tuner.o(.text.dsp_set_filter))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = dsp_set_filter &rArr; dsp_write1 &rArr; dsp_start_subaddr &rArr; I2C_Start &rArr; I2C_WriteByte &rArr; I2C_Delay &rArr; HAL_Delay_us &rArr; HAL_SYSTICK_Config &rArr; SysTick_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_write1
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_SCSV
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Seek
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFilter
</UL>

<P><STRONG><a name="[90]"></a>dsp_start_subaddr</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, tuner.o(.text.dsp_start_subaddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = dsp_start_subaddr &rArr; I2C_Start &rArr; I2C_WriteByte &rArr; I2C_Delay &rArr; HAL_Delay_us &rArr; HAL_SYSTICK_Config &rArr; SysTick_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteByte
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Stat
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckUpdateSig
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRFStatReg
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TuneReg
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_write1
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_query1
</UL>

<P><STRONG><a name="[131]"></a>dsp_start_subaddr3</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, tuner.o(.text.dsp_start_subaddr3))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = dsp_start_subaddr3 &rArr; I2C_Start &rArr; I2C_WriteByte &rArr; I2C_Delay &rArr; HAL_Delay_us &rArr; HAL_SYSTICK_Config &rArr; SysTick_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteByte
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSineFreq
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBalFader
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTone
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVolume
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitEasyReady
</UL>

<P><STRONG><a name="[112]"></a>dsp_write1</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, tuner.o(.text.dsp_write1))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = dsp_write1 &rArr; dsp_start_subaddr &rArr; I2C_Start &rArr; I2C_WriteByte &rArr; I2C_Delay &rArr; HAL_Delay_us &rArr; HAL_SYSTICK_Config &rArr; SysTick_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_start_subaddr
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Sine
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRFCtrlReg
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dsp_set_filter
</UL>

<P><STRONG><a name="[8c]"></a>dsp_write_data</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, tuner.o(.text.dsp_write_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = dsp_write_data &rArr; WaitEasyReady &rArr; dsp_start_subaddr3 &rArr; I2C_Start &rArr; I2C_WriteByte &rArr; I2C_Delay &rArr; HAL_Delay_us &rArr; HAL_SYSTICK_Config &rArr; SysTick_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitEasyReady
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteByte
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Sine
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMode_AUX
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMode_RF
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRFCtrlReg
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootDirana3
</UL>

<P><STRONG><a name="[120]"></a>eeprom_erase_full_chip</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, eeprom.o(.text.eeprom_erase_full_chip))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = eeprom_erase_full_chip &rArr; I2C_Start &rArr; I2C_WriteByte &rArr; I2C_Delay &rArr; HAL_Delay_us &rArr; HAL_SYSTICK_Config &rArr; SysTick_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteByte
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMInitStation
</UL>

<P><STRONG><a name="[11e]"></a>eeprom_read_byte</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, eeprom.o(.text.eeprom_read_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = eeprom_read_byte &rArr; I2C_Restart &rArr; I2C_Start &rArr; I2C_WriteByte &rArr; I2C_Delay &rArr; HAL_Delay_us &rArr; HAL_SYSTICK_Config &rArr; SysTick_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadByte
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Restart
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteByte
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMGetArgs
</UL>

<P><STRONG><a name="[11b]"></a>eeprom_read_word</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, eeprom.o(.text.eeprom_read_word))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = eeprom_read_word &rArr; I2C_Restart &rArr; I2C_Start &rArr; I2C_WriteByte &rArr; I2C_Delay &rArr; HAL_Delay_us &rArr; HAL_SYSTICK_Config &rArr; SysTick_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadByte
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Restart
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteByte
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadChFreq
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMGetArgs
</UL>

<P><STRONG><a name="[fc]"></a>eeprom_write_byte</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, eeprom.o(.text.eeprom_write_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = eeprom_write_byte &rArr; I2C_Start &rArr; I2C_WriteByte &rArr; I2C_Delay &rArr; HAL_Delay_us &rArr; HAL_SYSTICK_Config &rArr; SysTick_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteByte
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_AnyHoldTime
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_ScanStayTime
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_BacklightKeep
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_BacklightAdj
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Squelch
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunerLoop
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanAny
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMUnpkWrData
</UL>

<P><STRONG><a name="[121]"></a>eeprom_write_word</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, eeprom.o(.text.eeprom_write_word))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = eeprom_write_word &rArr; I2C_Start &rArr; I2C_WriteByte &rArr; I2C_Delay &rArr; HAL_Delay_us &rArr; HAL_SYSTICK_Config &rArr; SysTick_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteByte
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunerLoop
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteChFreq
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMInitStation
</UL>

<P><STRONG><a name="[4c]"></a>fputc</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, main.o(.text.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[13d]"></a>getBandName</STRONG> (Thumb, 108 bytes, Stack size 12 bytes, ui.o(.text.getBandName))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = getBandName
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchAMChannel
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchFMChannel
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunerLoop
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThrottleFunction
</UL>

<P><STRONG><a name="[141]"></a>getTurnName</STRONG> (Thumb, 120 bytes, Stack size 12 bytes, ui.o(.text.getTurnName))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = getTurnName
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunerLoop
</UL>

<P><STRONG><a name="[46]"></a>main</STRONG> (Thumb, 202 bytes, Stack size 40 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1056<LI>Call Chain = main &rArr; TunerLoop &rArr; Menu &rArr; ProcMenuItem &rArr; Menu_Help &rArr; GetKey &rArr; IR_Check &rArr; processRemoteInput &rArr; switchFMChannel &rArr; ProcBand &rArr; SeekCh &rArr; LCDUpdate &rArr; OLED_XYStrLen &rArr; OLED_XYChar &rArr; OLED_ShowChar &rArr; DispChar &rArr; OLED_address &rArr; transfer_command &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackLightOn
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_screen
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_Check
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunerLoop
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunerInit
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Refresh
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_XYStr
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[ea]"></a>processRemoteInput</STRONG> (Thumb, 636 bytes, Stack size 224 bytes, ui.o(.text.processRemoteInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = processRemoteInput &rArr; switchFMChannel &rArr; ProcBand &rArr; SeekCh &rArr; LCDUpdate &rArr; OLED_XYStrLen &rArr; OLED_XYChar &rArr; OLED_ShowChar &rArr; DispChar &rArr; OLED_address &rArr; transfer_command &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchAMChannel
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchFMChannel
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SystemReset
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMInitSetting
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMInitStation
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_Check
</UL>

<P><STRONG><a name="[9d]"></a>reverse_bit</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, lcd25696.o(.text.reverse_bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = reverse_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispChar
</UL>

<P><STRONG><a name="[149]"></a>switchAMChannel</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, ui.o(.text.switchAMChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = switchAMChannel &rArr; ProcBand &rArr; SeekCh &rArr; LCDUpdate &rArr; OLED_XYStrLen &rArr; OLED_XYChar &rArr; OLED_ShowChar &rArr; DispChar &rArr; OLED_address &rArr; transfer_command &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcBand
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDUpdate
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TuneFreqDisp
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBandName
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processRemoteInput
</UL>

<P><STRONG><a name="[148]"></a>switchFMChannel</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, ui.o(.text.switchFMChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = switchFMChannel &rArr; ProcBand &rArr; SeekCh &rArr; LCDUpdate &rArr; OLED_XYStrLen &rArr; OLED_XYChar &rArr; OLED_ShowChar &rArr; DispChar &rArr; OLED_address &rArr; transfer_command &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcBand
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDUpdate
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TuneFreqDisp
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBandName
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processRemoteInput
</UL>

<P><STRONG><a name="[107]"></a>tipsForLRorAnykey</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ui.o(.text.tipsForLRorAnykey))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tipsForLRorAnykey &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Help
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Tone
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Squelch
</UL>

<P><STRONG><a name="[123]"></a>transfer_command</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, lcd25696.o(.text.transfer_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = transfer_command &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_delay
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_address
</UL>

<P><STRONG><a name="[9e]"></a>transfer_data</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, lcd25696.o(.text.transfer_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = transfer_data &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_delay
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispFill
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_screen
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_address
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispChar
</UL>

<P><STRONG><a name="[14d]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[173]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[174]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[175]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[e9]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = printf
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcMenuItem
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcSubMenu
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Help
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_BalFader
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Tone
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Stat
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Time
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_AnyHoldTime
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_ScanStayTime
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_BacklightKeep
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_NoiseBlanker
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Stereo
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_AGC
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_FMDynamicBW
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Squelch
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tipsForLRorAnykey
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchAMChannel
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchFMChannel
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processRemoteInput
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_Check
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunerLoop
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThrottleFunction
</UL>

<P><STRONG><a name="[14f]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[176]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[177]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[178]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[ee]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDUpdate
</UL>

<P><STRONG><a name="[155]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[54]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[179]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[150]"></a>__ieee754_rem_pio2</STRONG> (Thumb, 828 bytes, Stack size 128 bytes, rred.o(i.__ieee754_rem_pio2))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __ieee754_rem_pio2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[152]"></a>__kernel_cos</STRONG> (Thumb, 230 bytes, Stack size 48 bytes, cos_i.o(i.__kernel_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = __kernel_cos &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[153]"></a>__kernel_poly</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[154]"></a>__kernel_sin</STRONG> (Thumb, 224 bytes, Stack size 64 bytes, sin_i.o(i.__kernel_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = __kernel_sin &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[157]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_dbl_infnan &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[158]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[156]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_dbl_underflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[15e]"></a>__read_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__read_errno))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>

<P><STRONG><a name="[17a]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[17b]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[17c]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[15f]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>

<P><STRONG><a name="[72]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, scanf_fp.o(i._is_digit), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[147]"></a>atof</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, atof.o(i.atof))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processRemoteInput
</UL>

<P><STRONG><a name="[132]"></a>cos</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, cos.o(i.cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSineFreq
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[135]"></a>SysTick_Config</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, tuner.o(.text.SysTick_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SysTick_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunerLoop
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVolumeThr
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThrottleFunction
</UL>

<P><STRONG><a name="[136]"></a>__NVIC_SetPriority</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, tuner.o(.text.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
</UL>

<P><STRONG><a name="[146]"></a>__NVIC_SystemReset</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ui.o(.text.__NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processRemoteInput
</UL>

<P><STRONG><a name="[e6]"></a>I2C_Delay</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, soft_i2c.o(.text.I2C_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I2C_Delay &rArr; HAL_Delay_us &rArr; HAL_SYSTICK_Config &rArr; SysTick_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadByte
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Restart
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteByte
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
</UL>

<P><STRONG><a name="[c1]"></a>SPI_EndRxTxTransaction</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, stm32f1xx_hal_spi.o(.text.SPI_EndRxTxTransaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
</UL>

<P><STRONG><a name="[12e]"></a>SPI_WaitFlagStateUntilTimeout</STRONG> (Thumb, 298 bytes, Stack size 48 bytes, stm32f1xx_hal_spi.o(.text.SPI_WaitFlagStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>

<P><STRONG><a name="[bd]"></a>RCC_Delay</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, stm32f1xx_hal_rcc.o(.text.RCC_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[b7]"></a>__NVIC_SetPriorityGrouping</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, stm32f1xx_hal_cortex.o(.text.__NVIC_SetPriorityGrouping))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>

<P><STRONG><a name="[b4]"></a>__NVIC_GetPriorityGrouping</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(.text.__NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[b5]"></a>NVIC_EncodePriority</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, stm32f1xx_hal_cortex.o(.text.NVIC_EncodePriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = NVIC_EncodePriority
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[b6]"></a>__NVIC_SetPriority</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, stm32f1xx_hal_cortex.o(.text.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
</UL>

<P><STRONG><a name="[b3]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, stm32f1xx_hal_cortex.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>

<P><STRONG><a name="[b2]"></a>__NVIC_DisableIRQ</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, stm32f1xx_hal_cortex.o(.text.__NVIC_DisableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
</UL>

<P><STRONG><a name="[c2]"></a>SysTick_Config</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f1xx_hal_cortex.o(.text.SysTick_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SysTick_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>

<P><STRONG><a name="[d9]"></a>TIM_OC1_SetConfig</STRONG> (Thumb, 358 bytes, Stack size 32 bytes, stm32f1xx_hal_tim.o(.text.TIM_OC1_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TIM_OC1_SetConfig &rArr; assert_failed
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[db]"></a>TIM_OC3_SetConfig</STRONG> (Thumb, 366 bytes, Stack size 32 bytes, stm32f1xx_hal_tim.o(.text.TIM_OC3_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TIM_OC3_SetConfig &rArr; assert_failed
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[dc]"></a>TIM_OC4_SetConfig</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, stm32f1xx_hal_tim.o(.text.TIM_OC4_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TIM_OC4_SetConfig &rArr; assert_failed
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[c7]"></a>TIM_TI2_SetConfig</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, stm32f1xx_hal_tim.o(.text.TIM_TI2_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM_TI2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_ConfigChannel
</UL>

<P><STRONG><a name="[c8]"></a>TIM_TI3_SetConfig</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, stm32f1xx_hal_tim.o(.text.TIM_TI3_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM_TI3_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_ConfigChannel
</UL>

<P><STRONG><a name="[c9]"></a>TIM_TI4_SetConfig</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, stm32f1xx_hal_tim.o(.text.TIM_TI4_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM_TI4_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_ConfigChannel
</UL>

<P><STRONG><a name="[e3]"></a>UART_SetConfig</STRONG> (Thumb, 358 bytes, Stack size 24 bytes, stm32f1xx_hal_uart.o(.text.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART_SetConfig &rArr; assert_failed
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[e5]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, stm32f1xx_hal_uart.o(.text.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>

<P><STRONG><a name="[159]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[14e]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[15c]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[15b]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[4d]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL>
<P><STRONG><a name="[68]"></a>_local_sscanf</STRONG> (Thumb, 62 bytes, Stack size 64 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>

<P><STRONG><a name="[6f]"></a>_fp_value</STRONG> (Thumb, 296 bytes, Stack size 64 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
